service: crud-api

plugins:
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_subject
    - app_category
    - app_points

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: prod
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    QUESTION_TABLE: question
    SUBSCRIPTION_TABLE: subscritpion
    COGNITO_IDENTITY_POOL_ID: eu-central-1:af61ca0b-8bc3-4bc8-ab27-65fc86d78bbb
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: 
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/$QUESTION_TABLE"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/$SUBSCRIPTION_TABLE"

functions:
  add-question:
    handler: question-add.handler
    description: POST /question
    events:
      - http:
          path: question
          method: post
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-question:
    handler: question-edit.handler
    description: PATCH /question
    events:
      - http:
          path: question
          method: patch
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-question:
    handler: question-get.handler
    description: GET /question
    events:
      - http:
          path: question
          method: get
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-question:
    handler: question-delete.handler
    description: DELETE /question
    events:
      - http:
          path: question
          method: delete
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  add-subscription:
    handler: subscription-add.handler
    description: POST /subscription
    events:
      - http:
          path: subscription
          method: post
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-subscription:
    handler: subscription-delete.handler
    description: DELETE /subscription
    events:
      - http:
          path: subscription
          method: delete
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-subscription:
    handler: subscription-get.handler
    description: GET /subscription
    events:
      - http:
          path: subscription
          method: get
          authorizer: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito_sls_backend_user_pool
        # UsernameAttributes: - first deploy uncomment
        #   - email
        # AutoVerifiedAttributes:
        #   - email
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito_sls_backend_client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito_sls_backend_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: ["CognitoUserPool", "ProviderName"]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          # unauthenticated:
          #   Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
              


    # CognitoUnauthRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: appUnauthRole
    #     Path: /
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: "Allow"
    #           Principal:
    #             Federated: "cognito-identity.amazonaws.com"
    #           Action:
    #             - "sts:AssumeRoleWithWebIdentity"
    #           Condition:
    #             StringEquals:
    #               "cognito-identity.amazonaws.com:aud":
    #                 Ref: CognitoIdentityPool
    #             "ForAnyValue:StringLike":
    #               "cognito-identity.amazonaws.com:amr": unauthenticated
    #     Policies:
    #       - PolicyName: "CognitoUnauthorizedPolicy"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "mobileanalytics:PutEvents"
    #                 - "cognito-sync:*"
    #                 - "cognito-identity:*"
    #               Resource: "*"

