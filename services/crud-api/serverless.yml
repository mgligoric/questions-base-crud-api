service: crud-api

plugins:
  - serverless-offline

custom:
  # custom:
  #   secrets: ${file(secrets.json)}
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_subject
    - app_category
    - app_points

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: prod
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    QUESTION_TABLE: question
    SUBSCRIPTION_TABLE: subscritpion
    USER_TABLE: user
    BUCKET_NAME: bucket-for-question
    # JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    # AWS_ID: ${self:custom.secrets.AWS_ID}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: 
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/$QUESTION_TABLE"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/$SUBSCRIPTION_TABLE"
      - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/$USER_TABLE"
    # - Effect: "Allow"
    #   Action:
    #     - "s3:ListBucket"
    #     - "s3:GetObject"
    #     - "s3:PutObject"
    #   Resource: "arn:aws:s3:::bucket-for-question/*"

functions:
  verify-token:
        handler: authorizer.handler
  login:
    handler: login.handler
    events:
      - http:
          path: login
          method: post
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  register:
    handler: register.handler
    events:
      - http:
          path: register
          method: post
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-user:
    handler: user-get.handler
    events:
      - http:
          path: user
          method: post
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  add-question:
    handler: question-add.handler
    description: POST /question
    events:
      - http:
          path: question
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  update-question:
    handler: question-edit.handler
    description: PATCH /question
    events:
      - http:
          path: question
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  get-question:
    handler: question-get.handler
    description: GET /question
    events:
      - http:
          path: question
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  delete-note:
    handler: question-delete.handler
    description: DELETE /question
    events:
      - http:
          path: question
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  add-subscription:
    handler: subscription-add.handler
    description: POST /subscription
    events:
      - http:
          path: subscription
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  delete-subscription:
    handler: subscription-delete.handler
    description: DELETE /subscription
    events:
      - http:
          path: subscription
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour
  get-subscription:
    handler: subscription-get.handler
    description: GET /subscription
    events:
      - http:
          path: subscription
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
          authorizer:
                name: verify-token
                            # this tells the lambda where to take the information from, 
                            # in our case the HTTP Authorization header
                identitySource: method.request.header.Authorization 
                resultTtlInSeconds: 3600 # cache the result for 1 hour

# resources:
#   Resources:
#     S3OperationsBucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: bucket-for-question
